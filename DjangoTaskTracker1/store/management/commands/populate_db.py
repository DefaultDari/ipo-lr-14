from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from store.models import Category, Manufacturer, Product, Cart, CartItem
from decimal import Decimal
import random


class Command(BaseCommand):
    help = 'Populate the database with sample data for Funtastik toy store'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Starting database population...'))
        
        # Create manufacturers
        self.create_manufacturers()
        
        # Create categories
        self.create_categories()
        
        # Create products
        self.create_products()
        
        # Create users and carts
        self.create_users_and_carts()
        
        self.stdout.write(self.style.SUCCESS('Database population completed successfully!'))

    def create_manufacturers(self):
        """Create 5 manufacturers"""
        manufacturers_data = [
            {
                'название': 'LEGO',
                'страна': 'Дания',
                'описание': 'Всемирно известный производитель конструкторов и развивающих игрушек'
            },
            {
                'название': 'Mattel',
                'страна': 'США',
                'описание': 'Американская компания, производитель игрушек Barbie, Hot Wheels и многих других'
            },
            {
                'название': 'Hasbro',
                'страна': 'США',
                'описание': 'Крупнейший производитель настольных игр, трансформеров и экшн-фигурок'
            },
            {
                'название': 'Fisher-Price',
                'страна': 'США',
                'описание': 'Специализируется на развивающих игрушках для детей младшего возраста'
            },
            {
                'название': 'Playskool',
                'страна': 'США',
                'описание': 'Производитель образовательных игрушек и игр для дошкольников'
            }
        ]
        
        for data in manufacturers_data:
            manufacturer, created = Manufacturer.objects.get_or_create(
                название=data['название'],
                defaults=data
            )
            if created:
                self.stdout.write(f'Created manufacturer: {manufacturer.название}')

    def create_categories(self):
        """Create 10 categories"""
        categories_data = [
            {
                'название': 'Конструкторы',
                'описание': 'Развивающие конструкторы для всех возрастов'
            },
            {
                'название': 'Куклы и аксессуары',
                'описание': 'Куклы, одежда и аксессуары для ролевых игр'
            },
            {
                'название': 'Машинки и транспорт',
                'описание': 'Автомобили, самолеты, поезда и другой транспорт'
            },
            {
                'название': 'Настольные игры',
                'описание': 'Семейные настольные игры и головоломки'
            },
            {
                'название': 'Развивающие игрушки',
                'описание': 'Обучающие и развивающие игрушки для малышей'
            },
            {
                'название': 'Мягкие игрушки',
                'описание': 'Плюшевые игрушки и мягкие друзья'
            },
            {
                'название': 'Спортивные игрушки',
                'описание': 'Мячи, скакалки и другие спортивные товары'
            },
            {
                'название': 'Творчество и рукоделие',
                'описание': 'Наборы для творчества, рисования и рукоделия'
            },
            {
                'название': 'Электронные игрушки',
                'описание': 'Интерактивные и электронные развивающие игрушки'
            },
            {
                'название': 'Игрушки для ванной',
                'описание': 'Водные игрушки и аксессуары для купания'
            }
        ]
        
        for data in categories_data:
            category, created = Category.objects.get_or_create(
                название=data['название'],
                defaults=data
            )
            if created:
                self.stdout.write(f'Created category: {category.название}')

    def create_products(self):
        """Create 34 products"""
        categories = list(Category.objects.all())
        manufacturers = list(Manufacturer.objects.all())
        
        products_data = [
            # Конструкторы (8 товаров)
            {'название': 'LEGO Classic Набор кубиков', 'описание': 'Базовый набор разноцветных кубиков LEGO для творческого строительства', 'цена': Decimal('2999.00'), 'количество_на_складе': 15},
            {'название': 'LEGO City Полицейский участок', 'описание': 'Большой набор для создания полицейского участка с машинами и фигурками', 'цена': Decimal('8999.00'), 'количество_на_складе': 8},
            {'название': 'LEGO Friends Дом на дереве', 'описание': 'Красочный домик на дереве для игр с друзьями', 'цена': Decimal('4599.00'), 'количество_на_складе': 12},
            {'название': 'LEGO Technic Суперкар', 'описание': 'Сложный технический конструктор спортивного автомобиля', 'цена': Decimal('12999.00'), 'количество_на_складе': 5},
            {'название': 'LEGO Creator Дом у моря', 'описание': 'Трансформируемый набор: дом, маяк или коттедж', 'цена': Decimal('6799.00'), 'количество_на_складе': 10},
            {'название': 'LEGO DUPLO Мой первый поезд', 'описание': 'Крупные детали для самых маленьких строителей', 'цена': Decimal('3299.00'), 'количество_на_складе': 18},
            {'название': 'LEGO Star Wars Звездный разрушитель', 'описание': 'Масштабная модель имперского звездного разрушителя', 'цена': Decimal('15999.00'), 'количество_на_складе': 3},
            {'название': 'LEGO Architecture Статуя Свободы', 'описание': 'Архитектурная модель знаменитого памятника', 'цена': Decimal('9999.00'), 'количество_на_складе': 6},
            
            # Куклы и аксессуары (5 товаров)
            {'название': 'Barbie Dreamhouse Дом мечты', 'описание': 'Трехэтажный дом Барби с мебелью и аксессуарами', 'цена': Decimal('7999.00'), 'количество_на_складе': 7},
            {'название': 'Barbie Карьерная кукла Врач', 'описание': 'Кукла Барби в роли врача с медицинскими аксессуарами', 'цена': Decimal('1999.00'), 'количество_на_складе': 25},
            {'название': 'Barbie Кабриолет розовый', 'описание': 'Стильный автомобиль для куклы Барби', 'цена': Decimal('2799.00'), 'количество_на_складе': 14},
            {'название': 'Monster High Кукла Клодин', 'описание': 'Стильная кукла из серии Monster High', 'цена': Decimal('1599.00'), 'количество_на_складе': 20},
            {'название': 'Enchantimals Кукла с питомцем', 'описание': 'Волшебная кукла Enchantimals с животным-другом', 'цена': Decimal('1299.00'), 'количество_на_складе': 22},
            
            # Машинки и транспорт (6 товаров)
            {'название': 'Hot Wheels Трек Супер скорость', 'описание': 'Захватывающий трек с петлями и препятствиями', 'цена': Decimal('3499.00'), 'количество_на_складе': 11},
            {'название': 'Hot Wheels Набор из 20 машинок', 'описание': 'Коллекция разнообразных металлических машинок', 'цена': Decimal('1999.00'), 'количество_на_складе': 16},
            {'название': 'Transformers Оптимус Прайм', 'описание': 'Трансформирующийся робот-автобот', 'цена': Decimal('4299.00'), 'количество_на_складе': 9},
            {'название': 'Matchbox Пожарная станция', 'описание': 'Игровой набор пожарной станции с техникой', 'цена': Decimal('2599.00'), 'количество_на_складе': 13},
            {'название': 'Вертолет на радиоуправлении', 'описание': 'Радиоуправляемый вертолет для детей от 8 лет', 'цена': Decimal('5999.00'), 'количество_на_складе': 8},
            {'название': 'Гоночная машина на пульте', 'описание': 'Быстрая радиоуправляемая гоночная машина', 'цена': Decimal('3799.00'), 'количество_на_складе': 12},
            
            # Настольные игры (4 товара)
            {'название': 'Монополия Классическая', 'описание': 'Классическая экономическая настольная игра', 'цена': Decimal('2299.00'), 'количество_на_складе': 15},
            {'название': 'Scrabble Эрудит', 'описание': 'Словесная игра для развития словарного запаса', 'цена': Decimal('1799.00'), 'количество_на_складе': 18},
            {'название': 'Твистер', 'описание': 'Веселая игра на координацию и гибкость', 'цена': Decimal('1299.00'), 'количество_на_складе': 20},
            {'название': 'Дженга', 'описание': 'Игра на ловкость с деревянными блоками', 'цена': Decimal('999.00'), 'количество_на_складе': 25},
            
            # Развивающие игрушки (4 товара)
            {'название': 'Fisher-Price Смейся и учись', 'описание': 'Интерактивная развивающая игрушка для малышей', 'цена': Decimal('2799.00'), 'количество_на_складе': 14},
            {'название': 'Сортер геометрических фигур', 'описание': 'Деревянная игрушка для изучения форм и цветов', 'цена': Decimal('1599.00'), 'количество_на_складе': 22},
            {'название': 'Музыкальное пианино', 'описание': 'Детское пианино с записью и воспроизведением', 'цена': Decimal('2299.00'), 'количество_на_складе': 16},
            {'название': 'Обучающий планшет', 'описание': 'Электронный планшет с обучающими программами', 'цена': Decimal('3999.00'), 'количество_на_складе': 10},
            
            # Мягкие игрушки (3 товара)
            {'название': 'Медведь Тедди большой', 'описание': 'Большой плюшевый медведь высотой 60 см', 'цена': Decimal('2999.00'), 'количество_на_складе': 12},
            {'название': 'Единорог мягкий', 'описание': 'Красочный плюшевый единорог с блестящей гривой', 'цена': Decimal('1799.00'), 'количество_на_складе': 18},
            {'название': 'Собачка интерактивная', 'описание': 'Мягкая собачка, которая лает и виляет хвостом', 'цена': Decimal('3299.00'), 'количество_на_складе': 9},
            
            # Спортивные игрушки (2 товара)
            {'название': 'Футбольный мяч детский', 'описание': 'Качественный футбольный мяч размер 3', 'цена': Decimal('799.00'), 'количество_на_складе': 30},
            {'название': 'Скакалка с счетчиком', 'описание': 'Скакалка с электронным счетчиком прыжков', 'цена': Decimal('599.00'), 'количество_на_складе': 35},
            
            # Творчество и рукоделие (1 товар)
            {'название': 'Набор для рисования 150 предметов', 'описание': 'Большой набор карандашей, фломастеров и красок', 'цена': Decimal('2499.00'), 'количество_на_складе': 13},
            
            # Электронные игрушки (1 товар)
            {'название': 'Робот-трансформер программируемый', 'описание': 'Программируемый робот с голосовым управлением', 'цена': Decimal('8999.00'), 'количество_на_складе': 5}
        ]
        
        # Распределяем товары по категориям
        category_mapping = {
            'Конструкторы': 8,
            'Куклы и аксессуары': 5,
            'Машинки и транспорт': 6,
            'Настольные игры': 4,
            'Развивающие игрушки': 4,
            'Мягкие игрушки': 3,
            'Спортивные игрушки': 2,
            'Творчество и рукоделие': 1,
            'Электронные игрушки': 1
        }
        
        product_index = 0
        for category_name, count in category_mapping.items():
            category = Category.objects.get(название=category_name)
            for i in range(count):
                if product_index < len(products_data):
                    data = products_data[product_index]
                    manufacturer = random.choice(manufacturers)
                    
                    product, created = Product.objects.get_or_create(
                        название=data['название'],
                        defaults={
                            'описание': data['описание'],
                            'цена': data['цена'],
                            'количество_на_складе': data['количество_на_складе'],
                            'категория': category,
                            'производитель': manufacturer,
                            'фото_товара': ''  # В реальном проекте здесь были бы загружены изображения
                        }
                    )
                    if created:
                        self.stdout.write(f'Created product: {product.название}')
                    product_index += 1

    def create_users_and_carts(self):
        """Create 5 users with carts containing items"""
        users_data = [
            {'username': 'anna_mom', 'email': 'anna@example.com', 'first_name': 'Анна', 'last_name': 'Петрова'},
            {'username': 'sergey_dad', 'email': 'sergey@example.com', 'first_name': 'Сергей', 'last_name': 'Иванов'},
            {'username': 'maria_teacher', 'email': 'maria@example.com', 'first_name': 'Мария', 'last_name': 'Сидорова'},
            {'username': 'dmitry_uncle', 'email': 'dmitry@example.com', 'first_name': 'Дмитрий', 'last_name': 'Козлов'},
            {'username': 'elena_grandma', 'email': 'elena@example.com', 'first_name': 'Елена', 'last_name': 'Михайлова'}
        ]
        
        products = list(Product.objects.all())
        
        for user_data in users_data:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'email': user_data['email'],
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                }
            )
            if created:
                user.set_password('password123')  # Простой пароль для тестирования
                user.save()
                self.stdout.write(f'Created user: {user.username}')
            
            # Создаем корзину для пользователя
            cart, cart_created = Cart.objects.get_or_create(пользователь=user)
            if cart_created:
                self.stdout.write(f'Created cart for user: {user.username}')
                
                # Добавляем 2-4 случайных товара в корзину
                num_items = random.randint(2, 4)
                selected_products = random.sample(products, num_items)
                
                for product in selected_products:
                    quantity = random.randint(1, min(3, product.количество_на_складе))
                    cart_item, created = CartItem.objects.get_or_create(
                        корзина=cart,
                        товар=product,
                        defaults={'количество': quantity}
                    )
                    if created:
                        self.stdout.write(f'  Added {product.название} (x{quantity}) to cart')
